---
- hosts: haraka
  remote_user: root

  vars:
    # Timezone
    timezone: 'Europe/Paris'
    # Node
    # node_version: "0.10.32"
    # node_prefix: "node-v{{node_version}}"
    # node_tarball: "{{node_prefix}}.tar.gz"
    # node_path: "/usr/local"
  tasks:



    #########################
    # User management       
    #########################

    # First, create users
    - name: Create user {{ user1 }}
      user: name={{ user1 }}
            comment="{{ user1 }} user"
            shell=/bin/bash
            password={{ password }}

    - name: Create user {{ user2 }}
      user: name={{ user2 }}
            comment="{{ user2 }} user"
            shell=/bin/bash
            password={{ password }}

    - name: Kill user's processes
      command: pkill -u user
      ignore_errors: yes

    - name: Delete user "user"
      user: name=user state=absent remove=yes force=yes

    - name: Force-change password {{ user1 }}
      command: /usr/bin/chage -d 0 {{ user1 }}

    - name: Force-change password for {{ user2 }}
      command: /usr/bin/chage -d 0 {{ user2 }}

    - name: Verify Sudo
      apt: name=sudo state=latest

    - name: Add {{ user1 }} to sudoers
      template: src=templates/sudoers-user1.j2
                dest=/etc/sudoers.d/{{ user1 }}-sudoer
                validate='visudo -cf %s'

    - name: Add {{ user2 }} to sudoers
      template: src=templates/sudoers-user2.j2
                dest=/etc/sudoers.d/{{ user2 }}-sudoer
                validate='visudo -cf %s'

    - name: Add my public key to {{ user2 }}
      authorized_key: user={{ user2 }}
                      key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

     #########################
     # Time Management       
     #########################

    - name: Set local timezone
      copy: content={{ timezone }}
            dest=/etc/timezone
      notify: update tzdata

    - name: Install NTP
      apt: name=ntp state=present
          update_cache=yes

    - name: Start NTP service
      service: name=ntp state=started enabled=true

    ##########################
    # Security               
    ##########################

    - name: Install fail2ban
      apt: name=fail2ban state=present

    - name: Start fail2ban service
      service: name=fail2ban state=started enabled=true

    - name: Copy iptables rules
      copy: src=files/iptables.up
            dest=/etc/iptables.up
      notify: reload iptables

    - name: Copy iptables init script # To load iptables on server restart
      copy: src=files/iptables-script
            dest=/etc/network/if-pre-up.d/iptables
            mode=0755

    - name: Disallow root SSH access
      action: lineinfile dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
      notify: Restart sshd

    ##########################
    # Software               
    ##########################

    - name: Update packages
      apt: update_cache=yes upgrade=yes

    - name: Install Git
      apt: name=git state=present

    #NODE JS thanks to : https://github.com/aenglund/nodejs-ansible/ || Deprecated, now using package manager (and getting always the newest Nodejs)

    # - name: Node.js | Checking installed version of node.js
    #   shell: /usr/bin/test "$(node -v 2> /dev/null)" = v{{node_version}}
    #   register: wanted_version_installed
    #   ignore_errors: True

    # - name: Node.js | Fetching node.js source
    #   action: get_url url=http://nodejs.org/dist/v{{node_version}}/{{node_tarball}} dest=/tmp/
    #   when: wanted_version_installed.rc == 1

    # - name: Node.js | Unpack node.js tarball
    #   command: tar zxf {{node_tarball}} chdir=/tmp
    #   when: wanted_version_installed.rc == 1

    # - name: Node.js | Configure
    #   shell: /usr/bin/python ./configure --prefix={{node_path}} chdir=/tmp/{{node_prefix}}
    #   when: wanted_version_installed.rc == 1

    # - name: Node.js | Make
    #   shell: /usr/bin/make chdir=/tmp/{{node_prefix}}/
    #   when: wanted_version_installed.rc == 1

    # - name: Node.js | Make install
    #   shell: /usr/bin/make install chdir=/tmp/{{node_prefix}}/
    #   when: wanted_version_installed.rc == 1

    - name: Install Node.JS
      apt: name=nodejs state=present

    - name: Install Node.JS-legacy
      apt: name=nodejs-legacy state=present

    - name: Install Node.JS-NPM
      apt: name=npm state=present

    - name: Make alias node
      file: src=/usr/bin/nodejs dest=/usr/bin/node state=link 

    #Node.js install ends

    # - name: Remove Exim4
    #   apt:  name=$item state=absent
    #   with_items:
    #   - exim4
    #   - exim4-base
    #   - exim4-config
    #   - exim4-daemon-light

    - name: Remove Exim4
      apt: name=exim4* state=absent

    - name: Install Haraka
      npm: name=Haraka global=yes state=latest

    - name: Install Forever
      npm: name=forever global=yes state=latest

    - name: Prepare folders for Haraka Server
      file: path=/haraka state=directory mode="777"

    - name: Download Haraka-Server
      git: repo=http://gitlab.sodewiva.com/mantoine/haraka-list-server.git
            dest=/haraka/server

    #- name: Create repo
    - name: Clone haraka-list-testconfig
      git: repo=http://gitlab.sodewiva.com/mantoine/haraka-list-testconfig.git 
           bare=yes
           dest=/haraka/haraka-list
    #- name: Import hook
    - name: Import hook post-receive
      copy: src=files/post-receive
            dest=/haraka/haraka-list/hooks/post-receive
            mode=777
   # - name: Git add remote
    - name: Git Add Remote
      command: cd /haraka/haraka-list.git && git checkout master -f &&  git remote set-url production --push --add {{ user1 }}@{{groups['haraka'] }}

   # Demander Ã  Guillaume les commandes restantes
    - name: Start Haraka
      command: /usr/local/bin/forever start /usr/local/bin/haraka -c /haraka/server
    #Adding forever to the crontab
    - name: Crontab Haraka
      cron: name="Forever haraka" special_time=reboot job="/usr/local/bin/forever start /usr/local/bin/haraka -c /haraka/server"

  handlers:
  - name: Restart sshd
    action: service name=sshd state=restarted
  - name: reload iptables
    action: shell /sbin/iptables-restore < /etc/iptables.up
  - name: update tzdata
    command: /usr/sbin/dpkg-reconfigure --frontend noninteractive tzdata
